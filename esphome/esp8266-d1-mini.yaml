substitutions:
  name: "aiosense-d1-mini"
  project_name: "Schluggi.AIOsense"
  project_version: "2.0"
  mmwave_max_distance_move: 4.5m
  mmwave_max_distance_still: 4.5m
  mmwave_timeout: 5s

esphome:
  name: "${name}"
  project:
    name: "${project_name}"
    version: "${project_version}"

esp8266:
  board: d1_mini

# Enable logging
logger:
  baud_rate: 0 # disable logging via UART

# Enable Home Assistant API
api:
  encryption:
    key: "<secret>"

ota:
  password: "<secret>"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
#  manual_ip:
#    static_ip: 192.168.1.111
#    subnet: 255.255.255.0
#    gateway: 192.168.1.1

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${name}"

captive_portal:

web_server:
  port: 80

i2c:
  sda: 4
  scl: 5
  scan: true

uart:
  id: uart_bus
  tx_pin: GPIO1
  rx_pin: GPIO3
  baud_rate: 115200
  # debug:
  #   direction: BOTH
  #   dummy_receiver: true
  #   after:
  #     delimiter: "\n"
  #   sequence:
  #     - lambda: UARTDebug::log_string(direction, bytes);


binary_sensor:
  - platform: gpio
    name: "${name} PIR"
    id: motion_pir
    pin: GPIO13
    device_class: motion
    filters:
      - delayed_off:
          seconds: 1

  # enable for SEN0395, disable for HLK-LD2410
  - platform: gpio
    name: "${name} mmWave"
    id: motion_mmwave
    device_class: occupancy
    pin:
      number: GPIO16
      mode: INPUT_PULLDOWN

  # enable for HLK-LD2410, disable for SEN0395
  # - platform: ld2410
  #   has_target:
  #     name: ${name} mmWave
  #     id: motion_mmwave
  #   has_moving_target:
  #     name: ${name} Moving Target
  #   has_still_target:
  #     name: ${name} Still Target

  - platform: template
    name: ${name} Occupancy
    id: occupancy
    device_class: occupancy
    lambda: |-
      if (id(motion_mmwave).state or id(motion_pir).state) {
        return true;
      } 
      else if (id(motion_mmwave).state == 0 and id(motion_pir).state == 0) {
        return false;
      } 
      else {
        return id(occupancy).state;
      }

bme680_bsec:  # disable for bme280
  temperature_offset: "5.8"
  state_save_interval: "1h"

sensor:
  - platform: bh1750
    name: "${name} Illuminance"
    address: 0x23
    update_interval: 5s

#  - platform: bme280 # disable for bme680
#    address: 0x76
#    update_interval: 60s
#    temperature:
#      name: "${name} Temperature"
#      filters:
#        offset: -2.5
#    pressure:
#      name: "${name} Pressure"
#    humidity:
#      name: "${name} Humidity"

  - platform: bme680_bsec # disable for bme280
    temperature:
      name: "${name} Temperature"
      sample_rate: lp
      filters:
        - median
    pressure:
      name: "${name} Pressure"
      sample_rate: lp
      filters:
        - median
    humidity:
      name: "${name} Humidity"
      sample_rate: lp
      filters:
        - median
    iaq:
      name: "${name} IAQ"
      id: iaq
      filters:
        - median
    co2_equivalent:
      name: "${name} CO2 Equivalent"
      filters:
        - median
    breath_voc_equivalent:
      name: "${name} Breath VOC Equivalent"
      filters:
        - median

text_sensor:
  - platform: bme680_bsec # disable for bme280
    iaq_accuracy:
      name: "${name} IAQ Accuracy"

  - platform: template # disable for bme280
    name: "${name} IAQ Class"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if ( int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }

switch:
  # enable for SEN0395, disable for HLK-LD2410
  - platform: template
    name: "${name} mmWave Sensor"
    id: "mmwave_sensor"
    optimistic: true
    restore_state: true
    assumed_state: true
    turn_on_action:
      - uart.write: "sensorStart"
      - delay: 1s
    turn_off_action:
      - uart.write: "sensorStop"
      - delay: 1s

  # enable for SEN0395, disable for HLK-LD2410
  - platform: template
    name: "${name} mmWave LED"
    id: "mmwave_led"
    optimistic: true
    restore_state: true
    assumed_state: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

number:
  # enable for SEN0395, disable for HLK-LD2410
  - platform: template
    name: "${name} mmWave Distance"
    id: mmwave_distance
    min_value: 0
    max_value: 800
    initial_value: 315
    optimistic: true
    step: 50
    restore_value: true
    unit_of_measurement: cm
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda int cm = (int)ceil(x / 15.0);
          std::string cms = "detRangeCfg -1 0 " + to_string(cm);
          return std::vector<unsigned char>(cms.begin(), cms.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  # enable for SEN0395, disable for HLK-LD2410
  - platform: template
    name: "${name} mmWave Off Latency"
    id: mmwave_latency
    min_value: 0
    max_value: 65000
    initial_value: 12500
    optimistic: true
    step: 25
    restore_value: true
    unit_of_measurement: ms
    mode: box
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda int ms = (int)ceil(x / 25.0);
          std::string mss = "outputLatency -1 0 " + to_string(ms);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  # enable for SEN0395, disable for HLK-LD2410
  - platform: template
    name: "${name} mmWave Sensitivity"
    id: mmwave_sensitivity
    min_value: 0
    max_value: 9
    initial_value: 7
    optimistic: true
    step: 1
    restore_value: true
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write:
          !lambda std::string mss = "setSensitivity " + to_string((int)x);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

# enable for HLK-LD2410, disable for SEN0395
ld2410:
  timeout: ${mmwave_timeout}
  max_move_distance: ${mmwave_max_distance_move}
  max_still_distance: ${mmwave_max_distance_still}
  g0_move_threshold: 50
  g0_still_threshold: 0
  g1_move_threshold: 50
  g1_still_threshold: 0
  g2_move_threshold: 40
  g2_still_threshold: 40
  g3_move_threshold: 40
  g3_still_threshold: 40
  g4_move_threshold: 40
  g4_still_threshold: 40
  g5_move_threshold: 40
  g5_still_threshold: 40
  g6_move_threshold: 30
  g6_still_threshold: 15
  g7_move_threshold: 30
  g7_still_threshold: 15
  g8_move_threshold: 30
  g8_still_threshold: 15

button:
  - platform: restart
    name: "${name} Restart"

  # enable for SEN0395, disable for HLK-LD2410
  - platform: template
    name: "${name} Factory Reset mmWave"
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
