substitutions:
  name: "aiosense-s2-mini"
  project_name: "Schluggi.AIOsense"
  project_version: "2.0"
  mmwave_max_distance_move: 4.5m
  mmwave_max_distance_still: 4.5m
  mmwave_timeout: 5s

esphome:
  name: "${name}"
  project:
    name: "${project_name}"
    version: "${project_version}"

esp32:
  board: esp32-s2-saola-1
  framework:
    type: esp-idf

# Enable logging
logger:
  baud_rate: 0 # disable logging via UART

# Enable Home Assistant API
api:
  encryption:
    key: "<secret>"

ota:
  password: "<secret>"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
#  manual_ip:
#    static_ip: 192.168.1.111
#    subnet: 255.255.255.0
#    gateway: 192.168.1.1

i2c:
  sda: GPIO33
  scl: GPIO35
  scan: true

uart:
  id: uart_bus
  tx_pin: GPIO39
  rx_pin: GPIO37
  baud_rate: 115200
#  debug:
#    direction: BOTH
#    dummy_receiver: true
#    after:
#      delimiter: "\n"
#    sequence:
#      - lambda: UARTDebug::log_string(direction, bytes);
# --- Enable this block for SEN0395
  baud_rate: 115200
# --- OR Enable this block for HLK-LD2410
# baud_rate: 256000
# parity: NONE
# stop_bits: 1

bme680_bsec:  # disable for bme280
  temperature_offset: "5.8"
  state_save_interval: "1h"

binary_sensor:
  - platform: gpio
    name: "${name} PIR"
    id: motion_pir
    pin: GPIO11
    device_class: motion
    filters:
      - delayed_off:
          seconds: 1
  
  # enable for SEN0395, disable for HLK-LD2410
  - platform: gpio
    name: "${name} mmWave"
    id: motion_mmwave
    device_class: occupancy
    pin:
      number: GPIO3
      mode: INPUT_PULLDOWN

  # enable for HLK-LD2410, disable for SEN0395
  # - platform: ld2410
  #   has_target:
  #     name: ${name} mmWave
  #     id: motion_mmwave
  #   has_moving_target:
  #     name: ${name} Moving Target
  #   has_still_target:
  #     name: ${name} Still Target

  - platform: template
    name: ${name} Occupancy
    id: occupancy
    device_class: occupancy
    lambda: |-
      if (id(motion_mmwave).state or id(motion_pir).state) {
        return true;
      } 
      else if (id(motion_mmwave).state == 0 and id(motion_pir).state == 0) {
        return false;
      } 
      else {
        return id(occupancy).state;
      }

sensor:
  - platform: bh1750
    name: "${name} Illuminance"
    address: 0x23
    update_interval: 5s

  - platform: bme280 # or bme680
    address: 0x76
    update_interval: 60s
    temperature:
      name: "${name} Temperature"
      filters:
        offset: -2.5
    pressure:
      name: "${name} Pressure"
    humidity:
      name: "${name} Humidity"
  #   gas_resistance: # bme680 only
  #     name: "${name} Gas Resistance"

switch:
  # enable for SEN0395, disable for HLK-LD2410
  - platform: template
    name: "${name} mmWave Sensor"
    id: "mmwave_sensor"
    optimistic: true
    restore_state: true
    assumed_state: true
    turn_on_action:
      - uart.write: "sensorStart"
      - delay: 1s
    turn_off_action:
      - uart.write: "sensorStop"
      - delay: 1s
  # enable for SEN0395, disable for HLK-LD2410
  - platform: template
    name: "${name} mmWave LED"
    id: "mmwave_led"
    optimistic: true
    restore_state: true
    assumed_state: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 0"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 1"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

number:
  # enable for SEN0395, disable for HLK-LD2410
  - platform: template
    name: "${name} mmWave Distance"
    id: mmwave_distance
    min_value: 0
    max_value: 800
    initial_value: 315
    optimistic: true
    step: 50
    restore_value: true
    unit_of_measurement: cm
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda int cm = (int)ceil(x / 15.0);
          std::string cms = "detRangeCfg -1 0 " + to_string(cm);
          return std::vector<unsigned char>(cms.begin(), cms.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  # enable for SEN0395, disable for HLK-LD2410
  - platform: template
    name: "${name} mmWave Off Latency"
    id: mmwave_latency
    min_value: 0
    max_value: 65000
    initial_value: 12500
    optimistic: true
    step: 25
    restore_value: true
    unit_of_measurement: ms
    mode: box
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda int ms = (int)ceil(x / 25.0);
          std::string mss = "outputLatency -1 0 " + to_string(ms);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveCfg 0x45670123 0xCDEF89AB 0x956128C6 0xDF54AC89"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  # enable for SEN0395, disable for HLK-LD2410
  - platform: template
    name: "${name} mmWave Sensitivity"
    id: mmwave_sensitivity
    min_value: 0
    max_value: 9
    initial_value: 7
    optimistic: true
    step: 1
    restore_value: true
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write:
          !lambda std::string mss = "setSensitivity " + to_string((int)x);
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

button:
  - platform: restart
    name: "${name} Restart"

  # enable for SEN0395, disable for HLK-LD2410
  - platform: template
    name: "${name} Factory Reset mmWave"
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
