substitutions:
  bme_address: "0x76"
  co2_offset: "0"
  humidity_offset: "0"
  iaq_offset: "0"
  pressure_offset: "0"
  temperature_offset: "0"
  voc_offset: "0"

#external_components:
#  - source: github://schluggi/esphome@dev
#    components:
#      - bme68x_bsec

bme68x_bsec2_i2c:
  address: "${bme_address}"
  state_save_interval: 30min
  model: bme680

esphome:
  min_version: 2023.10.0

sensor:
  - platform: bme68x_bsec2
    temperature:
      name: "Temperature"
      filters:
        - offset: ${temperature_offset}
        - lambda: "return x + id(temperature_offset_ui).state;"
    pressure:
      name: "Pressure"
      device_class: atmospheric_pressure
      filters:
        - offset: ${pressure_offset}
        - lambda: "return x + id(pressure_offset_ui).state;"
    humidity:
      name: "Humidity"
      filters:
        - offset: ${humidity_offset}
        - lambda: "return x + id(humidity_offset_ui).state;"
    iaq:
      name: "IAQ"
      id: iaq
      device_class: aqi
      filters:
        - offset: ${iaq_offset}
        - lambda: "return x + id(iaq_offset_ui).state;"
    co2_equivalent:
      name: "CO2 Equivalent"
      device_class: carbon_dioxide
      filters:
        - offset: ${co2_offset}
        - lambda: "return x + id(co2_offset_ui).state;"
    breath_voc_equivalent:
      name: "Breath VOC Equivalent"
      device_class: volatile_organic_compounds
      filters:
        - offset: ${voc_offset}
        - lambda: "return x + id(voc_offset_ui).state;"

number:
  - platform: template
    name: "Temperature Offset"
    id: temperature_offset_ui
    unit_of_measurement: "Â°C"
    min_value: -10
    max_value: 10
    step: 0.1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:thermometer"
    entity_category: config

  - platform: template
    name: "Humidity Offset"
    id: humidity_offset_ui
    unit_of_measurement: "%"
    min_value: -50
    max_value: 50
    step: 0.1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:water-percent"
    entity_category: config

  - platform: template
    name: "Pressure Offset"
    id: pressure_offset_ui
    unit_of_measurement: "hPa"
    min_value: -500
    max_value: 500
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:gauge"
    entity_category: config

  - platform: template
    name: "CO2 Offset"
    id: co2_offset_ui
    unit_of_measurement: "ppm"
    min_value: -1000
    max_value: 1000
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:test-tube"
    entity_category: config

  - platform: template
    name: "VOC Offset"
    id: voc_offset_ui
    unit_of_measurement: "ppm"
    min_value: -1000
    max_value: 1000
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:test-tube"
    entity_category: config

  - platform: template
    name: "IAQ Offset"
    id: iaq_offset_ui
    unit_of_measurement: "IAQ"
    min_value: -400
    max_value: 400
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 0
    icon: "mdi:gauge"
    entity_category: config

text_sensor:
  - platform: template
    name: "IAQ Classification"
    icon: "mdi:checkbox-marked-circle-outline"
    lambda: |-
      if ( int(id(iaq).state) <= 50) {
        return {"Excellent"};
      }
      else if (int(id(iaq).state) >= 51 && int(id(iaq).state) <= 100) {
        return {"Good"};
      }
      else if (int(id(iaq).state) >= 101 && int(id(iaq).state) <= 150) {
        return {"Lightly polluted"};
      }
      else if (int(id(iaq).state) >= 151 && int(id(iaq).state) <= 200) {
        return {"Moderately polluted"};
      }
      else if (int(id(iaq).state) >= 201 && int(id(iaq).state) <= 250) {
        return {"Heavily polluted"};
      }
      else if (int(id(iaq).state) >= 251 && int(id(iaq).state) <= 350) {
        return {"Severely polluted"};
      }
      else if (int(id(iaq).state) >= 351) {
        return {"Extremely polluted"};
      }
      else {
        return {"error"};
      }
